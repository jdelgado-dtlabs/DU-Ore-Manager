{"slots":{"0":{"name":"screen1","type":{"events":[],"methods":[]}},"1":{"name":"hub1","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"storageAcq = true","filter":{"args":[],"signature":"storageAcquired()","slotKey":"1"},"key":"0"},{"code":"unit.stopTimer(\"check\",1)","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"-- Put values in L. L = kL times 1000.\n-- Tier 1 Limits\nIronLimit = 200000 --export:\nAlumLimit = 200000 --export:\nCarbLimit = 200000 --export:\nSiliLimit = 200000 --export:\n\n-- Tier 2 Limits\nSodiLimit = 100000 --export:\nChromLimit = 25000 --export:\nCalcLimit = 100000 --export:\nCoppLimit = 100000 --export:\n\n-- Tier 3 Limits\nSulfLimit = 30000 --export:\nSilvLimit = 30000 --export:\nNickLimit = 0 --export:\nLithLimit = 30000 --export:\n\n-- Tier 4 Limits\nCobaLimit = 0 --export:\nFlouLimit = 0 --export:\nScanLimit = 0 --export:\nGoldLimit = 30000 --export:\n\n-- Tier 5 Limits\nNiobLimit = 0 --export:\nTitaLimit = 0 --export:\nMangLimit = 0 --export:\nVanaLimit = 0 --export:\n\n\nlocal oreData = {\n    {\n        {name = \"Iron\", ore = \"Hematite\", limit = IronLimit},\n        {name = \"Aluminium\", ore = \"Bauxite\", limit = AlumLimit},\n        {name = \"Carbon\", ore = \"Coal\", limit = CarbLimit},\n        {name = \"Silicon\", ore = \"Quartz\", limit = SiliLimit}\n    },\n    {\n        {name = \"Sodium\", ore = \"Natron\", limit = SodiLimit},\n        {name = \"Chromium\", ore = \"Chromite\", limit = ChromLimit},\n        {name = \"Calcium\", ore = \"Limestone\", limit = CalcLimit},\n        {name = \"Copper\", ore = \"Malachite\", limit = CoppLimit}\n    },\n    {\n        {name = \"Sulfur\", ore = \"Pyrite\", limit = SulfLimit},\n        {name = \"Silver\", ore = \"Acanthite\", limit = SilvLimit},\n        {name = \"Nickel\", ore = \"Garnierite\", limit = NickLimit},\n        {name = \"Lithium\", ore = \"Petalite\", limit = LithLimit}\n    },\n    {\n        {name = \"Cobalt\", ore = \"Cobaltite\", limit = CobaLimit},\n        {name = \"Flourine\", ore = \"Cryolite\", limit = FlouLimit},\n        {name = \"Scandium\", ore = \"Kolbeckite\", limit = ScanLimit},\n        {name = \"Gold\", ore = \"Gold Nuggets\", limit = GoldLimit}\n    },\n    {\n        {name = \"Niobium\", ore = \"Columbite\", limit = NiobLimit},\n        {name = \"Titanium\", ore = \"Illmenite\", limit = TitaLimit},\n        {name = \"Manganese\", ore = \"Rhodonite\", limit = MangLimit},\n        {name = \"Vanadium\", ore = \"Vanadinite\", limit = VanaLimit}\n    }\n}\n\n-- func\nfunction prettyStr (x)\n    if type(x) == 'table' then\n        local elems = {}\n        for k, v in pairs(x) do\n            table.insert(elems, string.format('%s = %s', prettyStr(k), prettyStr(v)))\n        end\n        return string.format('{%s}', table.concat(elems, ', '))\n    else\n        return tostring(x)\n    end\nend\n\n-- processing\nlocal json = require('dkjson')\nlocal params = {}\n\nlocal maxContVol = hub1.getMaxVolume()\nlocal currContVol = hub1.getItemsVolume()\n\nif not storageAcq and not storeCall then\n    system.print(\"Acquiring Storage...\")\n    hub1.acquireStorage()\n    storeCall = true\nelse\n    local function str_split(input_string)\n            local t={}\n            for k, v in string.gmatch(input_string, \"\\\"(%w+)\\\":(%d)\") do\n                system.print(\"k: \"..k..\" v:\"..v)\n            t[k] = tonumber(v)\n            end\n            return t\n    end\n    jData = json.decode(screen1.getScriptOutput()) or {}\n    if type(jData) == \"string\" then\n        params = str_split(jData)\n    elseif type(jData) == \"table\" then\n        params = jData\n    end\n    if params[\"ore\"] and params[\"ore\"] > 0 then\n        system.print(\"Received Data...\")\n        system.print(prettyStr(params)..\" Type: \"..type(params))\n        screen1.clearScriptOutput()\n    end\nend\n\nif params[\"ore\"] and params[\"ore\"] > 0 then\n    local container = json.decode(hub1.getItemsList())\n    local tier = params[\"tier\"]\n    local ore = params[\"ore\"]\n    system.print(\"tier: \"..prettyStr(tier))\n    system.print(\"ore: \"..prettyStr(ore))\n    system.print(\"container: \"..prettyStr(container))\n    if tier and ore then\n        local oreName = oreData[tier][ore][\"ore\"]\n        local oreLimit = oreData[tier][ore][\"limit\"]\n        local output = {}\n\n        if currContVol == maxContVol then\n            output = { Full = true, empty = false, reqL = 0, currentL = 0 }\n        else\n            if container then\n                local match = false\n                system.print(\"container: \"..prettyStr(container))\n                for i,item in ipairs(container) do\n                    system.print(\"Item Name: \"..prettyStr(string.lower(container[i][\"name\"])))\n                    system.print(\"Ore Name: \"..prettyStr(string.lower(oreName)))\n                    if string.lower(container[i][\"name\"]) == string.lower(oreName) then\n                        output = { Full = false, empty = false, reqL = oreLimit, currentL = container[i][\"quantity\"] }\n                        match = true\n                    end\n                end\n                if not match then\n                    output = { Full = false, empty = true, reqL = oreLimit, currentL = 0 }\n                end\n            end\n        end\n        if output ~= {} then\n            local message = json.encode(output)\n            system.print(\"output: \"..prettyStr(output))\n            system.print(\"message: \"..prettyStr(message))\n            screen1.setScriptInput(message)\n            params = {}\n        end\n    end\nend","filter":{"args":[{"value":"check"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"storeCall = false\nunit.setTimer(\"check\",1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}